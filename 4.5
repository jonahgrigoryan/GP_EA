im trying to get step by step walkthrough to use @Zencoder agents to build completely the M3 implementation in full @Web i want to use the new sonnet 4.5 to write the steps on how to use zen agents for each step of M3 development. so i need to give it reference what files in the tech spec and design outlie specific to m3 for it to view but also to see the flow of completion of M1 to M2, this is the prompt i have so far but i am stuck, can you tell me how to prompt 4.5 so it can write complete outline for how to best use zen agents at each step but only specific to M3, so help me complete the prompt :

reference the following files for assistance: finalspec.md, .kiro/specs/rpea-m3/requirements.md, .kiro/specs/rpea-m3/design.md, .kiro/specs/rpea-m3/tasks.md
from the spec, the current repo branch has implemented M1 and M2 milestones. development on M3 is ready to start by using zencoder.ai agents end-to-end (M3 only, for now).







### Completed Prompt for Claude Sonnet 4.5

Here's a refined and complete version of your prompt, built on the snippet you provided. I structured it following best practices for Sonnet 4.5: starting with a clear role assignment to set the context, specifying the objective, incorporating the background and references you mentioned, emphasizing Zencoder agents' role in each step, and defining a structured output format. This leverages the model's long context handling by explicitly referencing the files (assuming you'll provide or summarize their contents in the actual input to Claude), while keeping the focus strictly on M3. It also ensures iterative, agentic use of Zencoder without venturing into M1/M2 details beyond the status update.

You can copy-paste this directly into Claude Sonnet 4.5 (e.g., via Anthropic's console or an integrated tool). If the files are large, attach or excerpt them in the prompt to fit within the context window.

---

You are an experienced software development consultant specializing in integrating AI agents like Zencoder into complex, milestone-driven projects, particularly in financial trading systems like MQL5-based Expert Advisors (EAs).

Your task is to create a detailed, step-by-step outline for implementing Milestone 3 (M3) of the RPEA project—focusing exclusively on the Order Engine and Synthetic XAUEUR features—using Zencoder.ai agents end-to-end. This outline should break down the M3 development process into actionable steps, detailing how Zencoder's AI agents (e.g., Coding Agent for generation/refactoring, Unit Testing Agent for verification, Code Repair for fixes, and Repo Grokking for context-aware analysis) can be leveraged at each stage to automate, optimize, and ensure high-quality implementation. Do not include steps for M1 or M2; assume they are fully implemented and reference them only as foundational context where relevant (e.g., for integrations).

Background: The current repository branch (feat/m2-bwisc) has successfully implemented Milestones 1 (M1) and 2 (M2), including core signals, risk management, and bandit learning components. Development for M3 is ready to start, with a focus on using Zencoder agents for all coding, testing, and integration tasks in this milestone only, for now. Key invariants from the project include risk budgets, news handling, OCO orders, trailing stops, synthetic symbol replication, and audit logging—ensure the outline respects these without altering locked specs.

Reference the following files for assistance and base your outline on their contents (I've summarized key sections below for context, but use the full details where possible):
- `finalspec.md`: Overall project spec, including Decisions & Constraints (LOCKED), risk/news invariants, and acceptance criteria for M3 (e.g., OCO logic, slippage enforcement, atomic two-leg ops).
- `.kiro/specs/rpea-m3/requirements.md`: Detailed functional requirements for M3, such as budget gates, news queueing, synthetic XAUEUR proxy/replication, and partial fill handling.
- `.kiro/specs/rpea-m3/design.md`: Technical design outlines, including Order Engine architecture, synthetic bar building, two-leg execution with rollback, and integration points with existing MQL5 includes (e.g., order_engine.mqh, synthetic.mqh, news.mqh).
- `.kiro/specs/rpea-m3/tasks.md`: Granular tasks with HOLD POINTS, such as implementing OCO pendings, market fallback retries, trailing activation, and testing gates.

[Insert full or excerpted contents of the above files here if possible, to provide comprehensive context.]

For each step in the outline:
- Number the steps sequentially, aligning them to the tasks in tasks.md while grouping related sub-tasks (e.g., implementation, testing, integration).
- Describe the core tasks involved, including any dependencies on M1/M2 components.
- Explain specifically how to use Zencoder agents: e.g., prompt the Coding Agent for generating MQL5 code in order_engine.mqh, use Repo Grokking to analyze existing includes like risk.mqh for integration, employ the Unit Testing Agent for deterministic tests with fake broker mocks, and apply Code Repair for fixing linter errors or slippage logic.
- Include HOLD POINTS from tasks.md where the process should pause for human review/acceptance before proceeding.
- Suggest best practices for Zencoder usage, such as iterative prompting (e.g., "Refine this code based on news invariants"), background runs for long tasks, and verification against acceptance criteria.

Present the outline in a structured format:
1. **Step Title**: Brief description of tasks.
   - **Zencoder Agent Usage**: How to apply specific agents (e.g., prompts, tools).
   - **Expected Outputs**: Key artifacts (e.g., updated .mqh files, tests).
   - **Risks/Invariants to Enforce**: Ties to specs.
   - **Next HOLD POINT**: If applicable.

End with a summary of how this agent-driven approach ensures compliance with M3 acceptance focus (e.g., OCO expiry, atomic rollbacks, audit fields) and tips for monitoring progress in Zencoder (e.g., using Chat Assistant for queries).

---

### Why This Prompt Works and Tips for Use
- **Role and Objective**: Sets Claude as an expert in AI-agent integration, keeping it focused on Zencoder-specific guidance without hallucinating unrelated advice.
- **Context and References**: Incorporates your exact snippet, plus the M1/M2 status and file refs. The placeholder for file contents maximizes the model's context window (up to 200K+ tokens) for accuracy—pull excerpts using tools like `read_file` if needed in your workflow.
- **Zencoder Focus**: Explicitly calls out agents from the docs (e.g., Coding Agent, Repo Grokking) to tie into their features like automation, repair, and testing, ensuring the outline is practical for end-to-end M3 build.
- **Structure and Constraints**: Enforces M3-only scope, HOLD POINTS, and invariants to align with your project's rules (e.g., no altering locked specs). The output format makes it easy to follow and implement.
- **Best Practices for Sonnet 4.5**: Keeps the prompt concise (~400 words core) but detailed, encourages verification (e.g., against specs), and supports iteration—after getting the outline, you can follow up with "Expand Step 3 with sample Zencoder prompts for OCO implementation."

If the generated outline needs tweaks (e.g., more code examples), prompt Claude iteratively: "Based on the previous outline, provide sample Zencoder agent prompts for Step 1." This should give you a solid walkthrough to kick off M3 with Zencoder! If you share the file contents or more details, I can refine this further.
